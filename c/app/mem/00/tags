!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG	malloc_0_1.h	6;"	d
_DEFAULT_BLOCK_SIZE	malloc_0_1.h	/^const size_t _DEFAULT_BLOCK_SIZE = 4*1024; \/\/ 默认内存块4k$/;"	v
_DEFAULT_BLOCK_SIZE	malloc_0_1.h	/^const size_t _DEFAULT_BLOCK_SIZE=20;$/;"	v
_MAX_PATCH_SIZE	malloc_0_1.h	/^const size_t _MAX_PATCH_SIZE = 1024; \/\/ 最多碎片化1k内存. $/;"	v
_MAX_PATCH_SIZE	malloc_0_1.h	/^const size_t _MAX_PATCH_SIZE = 5;$/;"	v
__MALLOC_0_1_H_	malloc_0_1.h	2;"	d
_malloc_head	malloc_0_1.h	/^typedef struct _malloc_head {$/;"	s
_malloc_head::p_size	malloc_0_1.h	/^    size_t p_size;                \/\/ 内存块大小 <= _MAX_PATCH_SIZE$/;"	m	struct:_malloc_head	access:public
_malloc_head::ptr_malloc	malloc_0_1.h	/^    malloc_t *ptr_malloc; \/\/ 内存结构起始地址$/;"	m	struct:_malloc_head	access:public
_malloc_head_t	malloc_0.c	/^malloc_head_t _malloc_head_t;$/;"	v
_malloc_t	malloc_0_1.h	/^typedef struct _malloc_t {$/;"	s
_malloc_t::data	malloc_0_1.h	/^    void *data;          \/\/ 4k内存起始地址$/;"	m	struct:_malloc_t	access:public
_malloc_t::used_bytes	malloc_0_1.h	/^    size_t used_bytes;    \/\/ 使用字节数, <= _DEFAULT_BLOCK_SIZE$/;"	m	struct:_malloc_t	access:public
data	malloc_0_1.h	/^    void *data;          \/\/ 4k内存起始地址$/;"	m	struct:_malloc_t	access:public
destroy_malloc	malloc_0.c	/^void destroy_malloc() {$/;"	f
destroy_malloc	malloc_0_1.c	/^void destroy_malloc(malloc_head_t *ptr_head) {$/;"	f	signature:(malloc_head_t *ptr_head)
destroy_malloc	malloc_0_1.h	/^void destroy_malloc(malloc_head_t *ptr_head);$/;"	p	signature:(malloc_head_t *ptr_head)
init_malloc	malloc_0.c	/^int init_malloc() {$/;"	f
init_malloc	malloc_0_1.c	/^int init_malloc(malloc_head_t *ptr_head) {$/;"	f	signature:(malloc_head_t *ptr_head)
init_malloc	malloc_0_1.h	/^int init_malloc(malloc_head_t *ptr_head);$/;"	p	signature:(malloc_head_t *ptr_head)
main	malloc_0.c	/^int main() {$/;"	f
main	malloc_0_1.c	/^int main() {$/;"	f
malloc_head_t	malloc_0_1.h	/^}malloc_head_t;$/;"	t	typeref:struct:_malloc_head
malloc_t	malloc_0_1.h	/^}malloc_t;$/;"	t	typeref:struct:_malloc_t
monitor	malloc_0.c	/^static void monitor() {$/;"	f	file:
monitor	malloc_0.c	/^static void monitor(){}$/;"	f	file:
monitor	malloc_0_1.c	/^static void monitor(const malloc_head_t *ptr_head) {$/;"	f	file:	signature:(const malloc_head_t *ptr_head)
monitor	malloc_0_1.c	/^static void monitor(const malloc_head_t *ptr_head){}$/;"	f	file:	signature:(const malloc_head_t *ptr_head)
p_free	malloc_0.c	/^int p_free(const void *ptr) {$/;"	f	signature:(const void *ptr)
p_free	malloc_0_1.c	/^int p_free(malloc_head_t *ptr_head, const void *ptr) {$/;"	f	signature:(malloc_head_t *ptr_head, const void *ptr)
p_free	malloc_0_1.h	/^int p_free(malloc_head_t *ptr_head, const void *ptr);$/;"	p	signature:(malloc_head_t *ptr_head, const void *ptr)
p_malloc	malloc_0.c	/^void *p_malloc(size_t num) {$/;"	f	signature:(size_t num)
p_malloc	malloc_0_1.c	/^void *p_malloc(malloc_head_t *ptr_head, size_t num) {$/;"	f	signature:(malloc_head_t *ptr_head, size_t num)
p_malloc	malloc_0_1.h	/^void *p_malloc(malloc_head_t *ptr_head, size_t num);$/;"	p	signature:(malloc_head_t *ptr_head, size_t num)
p_size	malloc_0_1.h	/^    size_t p_size;                \/\/ 内存块大小 <= _MAX_PATCH_SIZE$/;"	m	struct:_malloc_head	access:public
ptr_head	malloc_0.c	/^malloc_head_t *ptr_head=&_malloc_head_t;$/;"	v
ptr_malloc	malloc_0_1.h	/^    malloc_t *ptr_malloc; \/\/ 内存结构起始地址$/;"	m	struct:_malloc_head	access:public
test00	malloc_0.c	/^int test00() {$/;"	f
test00	malloc_0_1.c	/^int test00() {$/;"	f
test01	malloc_0.c	/^int test01() {$/;"	f
test01	malloc_0_1.c	/^int test01() {$/;"	f
test02	malloc_0.c	/^int test02() {$/;"	f
test02	malloc_0_1.c	/^int test02() {$/;"	f
test03	malloc_0.c	/^int test03() {$/;"	f
test03	malloc_0_1.c	/^int test03() {$/;"	f
test04	malloc_0.c	/^int test04() {$/;"	f
test04	malloc_0_1.c	/^int test04() {$/;"	f
used_bytes	malloc_0_1.h	/^    size_t used_bytes;    \/\/ 使用字节数, <= _DEFAULT_BLOCK_SIZE$/;"	m	struct:_malloc_t	access:public
